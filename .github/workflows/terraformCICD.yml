name: Terraform CI/CD

on:
  push:
    branches:
      - main  # Or your desired deployment branch
    paths:
      - 'Terraform/**'  # Trigger only on changes to the Terraform folder
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    environment: production  # Or the environment you want to deploy to (e.g., staging)

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.1  # Specify the Terraform version (e.g., 1.3.0)

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1


      - name: Delete Existing IAM Policy for EC2
        run: |
          POLICY_NAME="invoke_lambda_function_and_get_s3_object"
          POLICY_ARN=$(aws iam list-policies --query 'Policies[?PolicyName==`'$POLICY_NAME'`].Arn' --output text)
          if [ -n "$POLICY_ARN" ]; then
            aws iam delete-policy --policy-arn $POLICY_ARN
          else
            echo "IAM Policy $POLICY_NAME does not exist."
          fi

      - name: Delete Existing IAM Policy for CodeDeploy
        run: |
          POLICY_NAME="Policy_for_codeDeploy_EC2"
          POLICY_ARN=$(aws iam list-policies --query 'Policies[?PolicyName==`'$POLICY_NAME'`].Arn' --output text)
          if [ -n "$POLICY_ARN" ]; then
            aws iam delete-policy --policy-arn $POLICY_ARN
          else
            echo "IAM Policy $POLICY_NAME does not exist."
          fi

      - name: Delete Existing IAM Role for CodeDeploy
        run: |
          ROLE_NAME="Policy_for_codeDeploy_EC2-role"
          aws iam delete-role --role-name $ROLE_NAME || echo "IAM Role $ROLE_NAME does not exist."

      - name: Delete Existing CodeDeploy Application
        run: |
          APP_NAME="webapp"
          aws deploy delete-application --application-name $APP_NAME || echo "CodeDeploy Application $APP_NAME does not exist."

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan
        continue-on-error: true # If you want to continue even if the plan fails (for logging purposes)

      - name: Terraform Apply
        run: terraform apply -auto-approve
